{"version":3,"sources":["components/Header.js","components/Ingredients.js","components/AddRecipe.js","components/ShowAddForm.js","components/Recipes.js","App.js","index.js"],"names":["Header","className","Ingredients","deleteIngredient","addIngredient","ingrList","servingPpl","useState","qty","setQty","unit","setUnit","ingName","setIngName","qtyValidated","setQtyValidated","ingNameValidated","setIngNameValidated","Row","Form","Label","Col","sm","Floating","Control","id","type","value","onChange","e","target","toLowerCase","htmlFor","Button","variant","size","onClick","preventDefault","length","map","ingr","CloseButton","ingId","AddRecipe","addRecipe","setShowAddRecipe","recipeNameValid","setRecipeNameValid","servesValid","setServesValid","ingredientsValid","setIngredientsValid","recipeName","setRecipeName","prepTime","setPrepTime","cookingTime","setCookingTime","setServingPpl","method","setMethod","servesOrigin","setServesOrigin","showAlert","setShowAlert","setIngrList","noValidate","onSubmit","serves","ingredients","xl","required","md","filter","ingredient","ingPerServe","newIngredient","Math","floor","random","as","Alert","show","ShowAddForm","onAdd","showAddRecipe","Recipes","recipes","setRecipes","deleteRecipe","Container","Accordion","recipe","Item","eventKey","toUpperCase","Body","updatedRecipe","parseInt","decreaseServes","increaseServes","title","App","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","newRecipe","ReactDOM","render","document","getElementById"],"mappings":"oNAWeA,MATf,WACI,OACI,yBAAQC,UAAU,WAAlB,UACG,gDACA,kF,sCCwIIC,MAtIf,YAKI,IAJFC,EAIC,EAJDA,iBACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,SACAC,EACC,EADDA,WAEA,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGA,EAAwCN,oBAAS,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAAgDR,oBAAS,GAAzD,mBAAOS,EAAP,KAAyBC,EAAzB,KAsBA,OACE,qCACE,eAACC,EAAA,EAAD,CAAKjB,UAAU,WAAf,UACE,cAACkB,EAAA,EAAKC,MAAN,CAAYnB,UAAU,OAAtB,0BAGA,eAACoB,EAAA,EAAD,CAAKC,IAAE,EAACrB,UAAU,YAAlB,UACE,eAACkB,EAAA,EAAKI,SAAN,WACE,cAACJ,EAAA,EAAKK,QAAN,CACEC,GAAG,WACHC,KAAK,OACLzB,UAAU,OACV0B,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAAWgB,EAAEC,OAAOH,MAAMI,kBAE7C,uBAAOC,QAAQ,WAAW/B,UAAU,OAApC,4BAIF,8BACE,cAACkB,EAAA,EAAKC,MAAN,CAAYnB,UAAU,0CAAtB,yBAIDe,GACC,cAACG,EAAA,EAAKC,MAAN,CAAYnB,UAAU,uCAAtB,gDAOJ,eAACoB,EAAA,EAAD,CAAKC,IAAE,EAACrB,UAAU,YAAlB,UACE,eAACkB,EAAA,EAAKI,SAAN,WACE,cAACJ,EAAA,EAAKK,QAAN,CACEC,GAAG,MACHC,KAAK,SACLzB,UAAU,OACV0B,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAAOpB,EAAOoB,EAAEC,OAAOH,UAEnC,uBAAOK,QAAQ,MAAM/B,UAAU,OAA/B,gCAIF,8BACE,cAACkB,EAAA,EAAKC,MAAN,CAAYnB,UAAU,0CAAtB,yBAIDa,GACC,cAACK,EAAA,EAAKC,MAAN,CAAYnB,UAAU,uCAAtB,oDAOJ,cAACoB,EAAA,EAAD,CAAKC,IAAE,EAACrB,UAAU,YAAlB,SACE,eAACkB,EAAA,EAAKI,SAAN,WACE,cAACJ,EAAA,EAAKK,QAAN,CACEC,GAAG,OACHC,KAAK,OACLzB,UAAU,OACV0B,MAAOjB,EACPkB,SAAU,SAACC,GAAD,OAAOlB,EAAQkB,EAAEC,OAAOH,MAAMI,kBAE1C,uBAAOC,QAAQ,WAAW/B,UAAU,OAApC,+BAON,cAACgC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKlC,UAAU,OAAOmC,QA9F3C,SAACP,IACbA,EAAEQ,iBAGG7B,GAAQI,IAKXR,EAAcI,EAAKE,EAAME,EADJJ,EAAMF,GAI3BG,EAAO,IACPE,EAAQ,IACRE,EAAW,IACXE,GAAgB,GAChBE,GAAoB,KAXpBF,GAAgB,GAChBE,GAAoB,KAwFpB,4BAICZ,EAASiC,OAAS,EACjB,oBAAIrC,UAAU,yBAAd,SACGI,EAASkC,KAAI,SAACC,GAAD,OACZ,qBAAIvC,UAAU,4EAAd,UACE,gCACE,+BAAOuC,EAAKhC,MADd,IAC0B,+BAAOgC,EAAK9B,OAAa,IACjD,+BAAO8B,EAAK5B,aAEd,cAAC6B,EAAA,EAAD,CACExC,UAAU,4DACVmC,QAAS,kBAAMjC,EAAiBqC,EAAKE,YAPsDF,EAAKE,YAaxG,mBAAGzC,UAAU,OAAb,yC,gCC2FO0C,MArNf,YAAqD,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,iBAE9B,EAA8CtC,oBAAS,GAAvD,mBAAOuC,EAAP,KAAwBC,EAAxB,KACA,EAAsCxC,oBAAS,GAA/C,mBAAOyC,EAAP,KAAoBC,EAApB,KACA,EAAgD1C,oBAAS,GAAzD,mBAAO2C,EAAP,KAAyBC,EAAzB,KAGA,EAAoC5C,mBAAS,IAA7C,mBAAO6C,EAAP,KAAmBC,EAAnB,KACA,EAAgC9C,mBAAS,IAAzC,mBAAO+C,EAAP,KAAiBC,EAAjB,KACA,EAAsChD,mBAAS,IAA/C,mBAAOiD,EAAP,KAAoBC,EAApB,KACA,EAAoClD,mBAAS,IAA7C,mBAAOD,EAAP,KAAmBoD,EAAnB,KACA,EAA4BnD,mBAAS,IAArC,mBAAOoD,EAAP,KAAeC,EAAf,KAEA,EAAwCrD,mBAAS,IAAjD,mBAAOsD,EAAP,KAAqBC,EAArB,KAEA,EAAkCvD,oBAAS,GAA3C,mBAAOwD,GAAP,KAAkBC,GAAlB,KAEA,GAAgCzD,mBAAS,IAAzC,qBAAOF,GAAP,MAAiB4D,GAAjB,MAqDA,OACE,eAAC9C,EAAA,EAAD,CAAMlB,UAAU,YAAYiE,YAAU,EAACC,SAnD3B,SAACtC,GACbA,EAAEQ,kBAEGe,IAAe9C,GAAeD,GAASiC,QAAU,GACpDW,GAAe,GACfF,GAAmB,GACnBI,GAAoB,GAEpBa,IAAa,KAEbF,EAAgBxD,GAChBsC,EAAU,CACRQ,aACAE,WACAE,cACAY,OAAQ9D,EACR+D,YAAahE,GACbsD,SACAE,iBAIFR,EAAc,IACdE,EAAY,IACZE,EAAe,IACfC,EAAc,IACdE,EAAU,IACVK,GAAY,IACZhB,GAAe,GACfF,GAAmB,GACnBI,GAAoB,GACpBN,GAAiB,GACjBmB,IAAa,KAmBf,UAEE,eAAC9C,EAAA,EAAD,CAAKjB,UAAU,WAAf,UACE,eAACoB,EAAA,EAAD,CAAKiD,GAAI,EAAGrE,UAAU,OAAtB,UACE,eAACkB,EAAA,EAAKI,SAAN,WACE,cAACJ,EAAA,EAAKK,QAAN,CACEC,GAAG,aACHC,KAAK,OAELzB,UAAU,OACVsE,UAAQ,EACR5C,MAAOyB,EACPxB,SAAU,SAACC,GAAD,OAAOwB,EAAcxB,EAAEC,OAAOH,UAE1C,uBAAOK,QAAQ,aAAa/B,UAAU,OAAtC,8BAIF,8BACE,cAACkB,EAAA,EAAKC,MAAN,CAAYnB,UAAU,0CAAtB,yBAID6C,GACC,cAAC3B,EAAA,EAAKC,MAAN,CAAYnB,UAAU,uCAAtB,4CAOJ,cAACoB,EAAA,EAAD,CAAKmD,IAAE,EAACvE,UAAU,OAAlB,SACE,eAACkB,EAAA,EAAKI,SAAN,WACE,cAACJ,EAAA,EAAKK,QAAN,CACEC,GAAG,WACHC,KAAK,OACLzB,UAAU,OACV0B,MAAO2B,EACP1B,SAAU,SAACC,GAAD,OAAO0B,EAAY1B,EAAEC,OAAOH,UAExC,wBAAOK,QAAQ,WAAW/B,UAAU,OAApC,UACE,cAAC,IAAD,CAAgBA,UAAU,cAD5B,2BAQJ,cAACoB,EAAA,EAAD,CAAKmD,IAAE,EAACvE,UAAU,OAAlB,SACE,eAACkB,EAAA,EAAKI,SAAN,WACE,cAACJ,EAAA,EAAKK,QAAN,CACEC,GAAG,cACHC,KAAK,OACLzB,UAAU,OACV0B,MAAO6B,EACP5B,SAAU,SAACC,GAAD,OAAO4B,EAAe5B,EAAEC,OAAOH,UAE3C,wBAAOK,QAAQ,cAAc/B,UAAU,OAAvC,UACE,cAAC,IAAD,CAASA,UAAU,cADrB,uBAQJ,eAACoB,EAAA,EAAD,CAAKmD,IAAE,EAACvE,UAAU,OAAlB,UACE,eAACkB,EAAA,EAAKI,SAAN,WACE,cAACJ,EAAA,EAAKK,QAAN,CACEC,GAAG,aACHC,KAAK,SACLzB,UAAU,OACVsE,UAAQ,EACR5C,MAAOrB,EACPsB,SAAU,SAACC,GACT6B,EAAc7B,EAAEC,OAAOH,OACvBmC,EAAgBjC,EAAEC,OAAOH,UAG7B,wBAAOK,QAAQ,aAAa/B,UAAU,OAAtC,UACE,cAAC,IAAD,CAAYA,UAAU,cADxB,iBAKF,8BACE,cAACkB,EAAA,EAAKC,MAAN,CAAYnB,UAAU,0CAAtB,yBAID+C,GACC,cAAC7B,EAAA,EAAKC,MAAN,CAAYnB,UAAU,uCAAtB,kDAQLiD,GACC,qBAAKjD,UAAU,cAAf,SACE,cAACkB,EAAA,EAAKC,MAAN,CAAYnB,UAAU,kBAAtB,uCAKJ,cAAC,EAAD,CAEEE,iBAxHmB,SAACsB,GAExBwC,GAAY5D,GAASoE,QAAO,SAACC,GAAD,OAAgBA,EAAWhC,QAAUjB,OAuH7DrB,cAnHgB,SAACI,EAAKE,EAAME,EAAS+D,GACzC,IAEMC,EAAgB,CAAElC,MAFVmC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB,EAElBvE,MAAKE,OAAME,UAAS+D,eACnDV,GAAY,GAAD,mBAAK5D,IAAL,CAAeuE,MAgHtBvE,SAAUA,GACVC,WAAYA,GAJPD,GAASqC,OAQhB,cAACxB,EAAA,EAAD,CAAKjB,UAAU,WAAf,SACE,cAACoB,EAAA,EAAD,UACE,eAACF,EAAA,EAAKI,SAAN,CAAetB,UAAU,OAAzB,UACE,cAACkB,EAAA,EAAKK,QAAN,CACEC,GAAG,SACHuD,GAAG,WACH/E,UAAU,gBACV0B,MAAOgC,EACP/B,SAAU,SAACC,GAAD,OAAO+B,EAAU/B,EAAEC,OAAOH,UAEtC,wBAAOK,QAAQ,SAAS/B,UAAU,OAAlC,UACE,cAAC,IAAD,CAAkBA,UAAU,cAD9B,mBAON,cAACgF,EAAA,EAAD,CAAO/C,QAAQ,SAASgD,KAAMnB,GAA9B,+CAGA,qBAAK9D,UAAU,cAAf,SACE,cAACgC,EAAA,EAAD,CAAQC,QAAQ,UAAUR,KAAK,SAASS,KAAK,KAA7C,+BC/MOgD,MAVf,YAAgD,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,cAC5B,OACE,qBAAKpF,UAAU,qCAAf,SACE,cAACgC,EAAA,EAAD,CAAQG,QAASgD,EAAOlD,QAASmD,EAAgB,SAAW,UAA5D,SACCA,EAAgB,aAAe,kB,wCC+GvBC,MA3Gf,YAAyD,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAyBtC,OACE,mCACGF,EAAQjD,OAAS,EAChB,cAACoD,EAAA,EAAD,CAAWzF,UAAU,OAArB,SACE,cAAC0F,EAAA,EAAD,CAAW1F,UAAU,YAArB,SACCsF,EAAQhD,KAAI,SAACqD,GAAD,OAET,cADF,CACGD,EAAA,EAAUE,KAAX,CAAgBC,SAAUF,EAAOnE,GAAjC,UACE,cAACkE,EAAA,EAAU3F,OAAX,UACG4F,EAAOxC,WAAW2C,gBAErB,eAACJ,EAAA,EAAUK,KAAX,CAAgB/F,UAAU,OAA1B,UACE,sBAAKA,UAAU,sCAAf,UACE,eAACoB,EAAA,EAAD,CAAKpB,UAAU,cAAf,UACE,cAACoB,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,UAAMuE,EAAOtC,cAEf,eAACjC,EAAA,EAAD,CAAKpB,UAAU,cAAf,UACE,cAACoB,EAAA,EAAD,sBACA,cAACA,EAAA,EAAD,UAAMuE,EAAOpC,iBAEf,eAACnC,EAAA,EAAD,CAAKpB,UAAU,cAAf,UACE,cAACoB,EAAA,EAAD,qBACA,cAACA,EAAA,EAAD,UAAMuE,EAAO/B,qBAGjB,eAAC3C,EAAA,EAAD,CAAKjB,UAAU,WAAf,UACE,eAACoB,EAAA,EAAD,CAAKmD,GAAI,EAAGvE,UAAU,YAAtB,UACE,6CACA,eAACyF,EAAA,EAAD,CAAWzF,UAAU,2CAArB,UACE,oDACA,gCACE,cAAC,IAAD,CACEA,UAAU,gBACVmC,QAAS,kBA/CZ,SAACX,GACtB,IAAMwE,EAAgBV,EAAQhD,KAAI,SAACqD,GACjC,OAAIA,EAAOnE,KAAOA,EACT,2BACFmE,GADL,IAEExB,OAAQ8B,SAASN,EAAOxB,QAAU,EAAI8B,SAASN,EAAOxB,QAAU,EAAI,IAGjEwB,KAETJ,EAAWS,GAqC4BE,CAAeP,EAAOnE,OAEvC,sBAAMxB,UAAU,OAAhB,SAAwB2F,EAAOxB,SAC/B,cAAC,IAAD,CACEnE,UAAU,gBACVmC,QAAS,kBA9DZ,SAACX,GACtB,IAAMwE,EAAgBV,EAAQhD,KAAI,SAACqD,GACjC,OAAIA,EAAOnE,KAAOA,EACT,2BAAKmE,GAAZ,IAAoBxB,OAAQ8B,SAASN,EAAOxB,QAAU,IAEjDwB,KAETJ,EAAWS,GAuD4BG,CAAeR,EAAOnE,aAI1CmE,EAAOvB,YAAY9B,KAAI,SAACC,GAAD,OACpB,cAACtB,EAAA,EAAD,UACE,eAACG,EAAA,EAAD,WACE,+BAAOmB,EAAKmC,YAAciB,EAAOxB,SACjC,sBAAMnE,UAAU,OAAhB,SAAwBuC,EAAK9B,OAC7B,sBAAMT,UAAU,OAAhB,SAAwBuC,EAAK5B,cAJvB4B,EAAKE,aASrB,eAACrB,EAAA,EAAD,CAAKmD,GAAI,EAAGvE,UAAU,YAAtB,UACE,wCACA,cAACyF,EAAA,EAAD,CAAWzF,UAAU,YAArB,SACG2F,EAAOjC,eAId,qBAAK1D,UAAU,gBAAf,SACE,cAAC,IAAD,CACEA,UAAU,uBACVoG,MAAM,gBACNjE,QAAS,kBAAMqD,EAAaG,EAAOnE,cAzDDmE,EAAOnE,WAmEvD,qBAAKxB,UAAU,mBAAf,SACE,mBAAGA,UAAU,OAAb,sCC+BKqG,MApIf,WACE,MAA0C/F,oBAAS,GAAnD,mBAAO8E,EAAP,KAAsBxC,EAAtB,KAEA,EAA8BtC,mBAAS,IAAvC,mBAAOgF,EAAP,KAAgBC,EAAhB,KAkHA,OAvBAe,qBAAU,WACLC,aAAaC,QAAQ,gBACpBjB,EAAWkB,KAAKC,MAAMH,aAAaC,QAAQ,mBAE9C,IAGHF,qBAAU,WACRC,aAAaI,QAAQ,cAAeF,KAAKG,UAAUtB,MAClD,CAACA,IAeF,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAaH,MAAO,kBAAMvC,GAAkBwC,IAAiBA,cAAeA,IAC3EA,GAAiB,cAAC,EAAD,CAA4BzC,UAVhC,SAACgD,GACjB,IAAMnE,EAAKoD,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB,EACxC+B,EAAS,aAAKrF,MAAOmE,GAC3BJ,EAAW,GAAD,mBAAKD,GAAL,CAAcuB,MAO8CjE,iBAAkBA,GAApD0C,EAAQ9D,IAC1C,cAAC,EAAD,CACE8D,QAASA,EACTC,WAAYA,EACZC,aAnBe,SAAChE,GACpB+D,EAAWD,EAAQd,QAAO,SAACmB,GAAD,OAAYA,EAAOnE,KAAOA,QAmB3C8D,EAAQ9D,QClIrBsF,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3ce41a8d.chunk.js","sourcesContent":["\n\nfunction Header() {\n    return (\n        <header className=\"p-3 mb-5\">\n           <h1>My Recipe Book</h1> \n           <blockquote>Store all your recipes in a web page</blockquote>\n        </header>\n    )\n}\n\nexport default Header\n","import { useState } from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport CloseButton from \"react-bootstrap/CloseButton\";\n\nfunction Ingredients({\n  deleteIngredient,\n  addIngredient,\n  ingrList,\n  servingPpl\n}) {\n  const [qty, setQty] = useState(\"\");\n  const [unit, setUnit] = useState(\"\");\n  const [ingName, setIngName] = useState(\"\");\n\n  //validation states warning messages\n  const [qtyValidated, setQtyValidated] = useState(false);\n  const [ingNameValidated, setIngNameValidated] = useState(false);\n\n  const onAdd = (e) => {\n    e.preventDefault();\n\n    // validation for the ingredients qty and name\n    if (!qty || !ingName) {\n      setQtyValidated(true);\n      setIngNameValidated(true);\n    } else {\n      const ingPerServe = (qty / servingPpl);\n      addIngredient(qty, unit, ingName, ingPerServe);\n\n      //reset the ingredients values\n      setQty(\"\");\n      setUnit(\"\");\n      setIngName(\"\");\n      setQtyValidated(false);\n      setIngNameValidated(false);\n    }\n  };\n\n  return (\n    <>\n      <Row className=\"g-3 mb-1\">\n        <Form.Label className=\"mb-0\">Ingredients:</Form.Label>\n\n        {/* ingredient name */}\n        <Col sm className=\"mt-1 mb-3\">\n          <Form.Floating>\n            <Form.Control\n              id=\"ing-name\"\n              type=\"text\"\n              className=\"pb-1\"\n              value={ingName}\n              onChange={(e) => setIngName(e.target.value.toLowerCase())}\n            />\n            <label htmlFor=\"ing-name\" className=\"pt-2\">\n              Ing. Name *\n            </label>\n          </Form.Floating>\n          <div>\n            <Form.Label className=\"m-0 text-secondary validation-text ps-2\">\n              Required*\n            </Form.Label>\n          </div>\n          {ingNameValidated && (\n            <Form.Label className=\"m-0 text-danger validation-text ps-2\">\n              Please add the ingredient name.\n            </Form.Label>\n          )}\n        </Col>\n\n        {/* ingredient qty */}\n        <Col sm className=\"mt-1 mb-3\">\n          <Form.Floating>\n            <Form.Control\n              id=\"qty\"\n              type=\"number\"\n              className=\"pb-1\"\n              value={qty}\n              onChange={(e) => setQty(e.target.value)}\n            />\n            <label htmlFor=\"qty\" className=\"pt-2\">\n              Ing. Quantity *\n            </label>\n          </Form.Floating>\n          <div>\n            <Form.Label className=\"m-0 text-secondary validation-text ps-2\">\n              Required*\n            </Form.Label>\n          </div>\n          {qtyValidated && (\n            <Form.Label className=\"m-0 text-danger validation-text ps-2\">\n              Please add the ingredient quantity.\n            </Form.Label>\n          )}\n        </Col>\n\n        {/* ingredient unit */}\n        <Col sm className=\"mt-1 mb-3\">\n          <Form.Floating>\n            <Form.Control\n              id=\"unit\"\n              type=\"text\"\n              className=\"pb-1\"\n              value={unit}\n              onChange={(e) => setUnit(e.target.value.toLowerCase())}\n            />\n            <label htmlFor=\"ing-name\" className=\"pt-2\">\n              Ing. Unit\n            </label>\n          </Form.Floating>\n        </Col>\n      </Row>\n\n      <Button variant=\"primary\" size=\"sm\" className=\"mb-3\" onClick={onAdd}>\n        Add Ingredient\n      </Button>\n\n      {ingrList.length > 0 ? (\n        <ul className=\"d-flex  flex-wrap ps-0\">\n          {ingrList.map((ingr) => (\n            <li className=\"ing-item mb-3 d-flex justify-content-between align-items-center px-2 me-2\" key={ingr.ingId}>\n              <div>\n                <span>{ingr.qty}</span> <span>{ingr.unit}</span>{\" \"}\n                <span>{ingr.ingName}</span>\n              </div>\n              <CloseButton\n                className=\"btn-close ms-2 align-self-start align-self-md-center mt-1\"\n                onClick={() => deleteIngredient(ingr.ingId)}\n              />\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className=\"mb-5\">No Ingredients to Show.</p>\n      )}\n    </>\n  );\n}\n\nexport default Ingredients;\n","import { useState } from \"react\";\nimport Ingredients from \"./Ingredients\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport { BsClockHistory } from \"react-icons/bs\";\nimport { BsClock } from \"react-icons/bs\";\nimport { FaUtensils } from \"react-icons/fa\";\nimport { GiCampCookingPot } from \"react-icons/gi\";\n\nfunction AddRecipe({ addRecipe, setShowAddRecipe }) {\n  // validation states\n  const [recipeNameValid, setRecipeNameValid] = useState(false);\n  const [servesValid, setServesValid] = useState(false);\n  const [ingredientsValid, setIngredientsValid] = useState(false);\n\n  // Recipe form states\n  const [recipeName, setRecipeName] = useState(\"\");\n  const [prepTime, setPrepTime] = useState(\"\");\n  const [cookingTime, setCookingTime] = useState(\"\");\n  const [servingPpl, setServingPpl] = useState(\"\");\n  const [method, setMethod] = useState(\"\");\n  \n  const [servesOrigin, setServesOrigin] = useState(\"\");\n\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [ingrList, setIngrList] = useState([]);\n\n  // fanction to add and display the new recipe\n  const onAdd = (e) => {\n    e.preventDefault();\n\n    if (!recipeName || !servingPpl || (ingrList.length <= 0)) {\n      setServesValid(true);\n      setRecipeNameValid(true);\n      setIngredientsValid(true);\n      //alert(\"Please check the required fields!\");\n      setShowAlert(true);\n    } else {\n      setServesOrigin(servingPpl);\n      addRecipe({\n        recipeName,\n        prepTime,\n        cookingTime,\n        serves: servingPpl,\n        ingredients: ingrList,\n        method,\n        servesOrigin,\n      });\n\n      //reset form fields\n      setRecipeName(\"\");\n      setPrepTime(\"\");\n      setCookingTime(\"\");\n      setServingPpl(\"\");\n      setMethod(\"\");\n      setIngrList([]);\n      setServesValid(false);\n      setRecipeNameValid(false);\n      setIngredientsValid(false);\n      setShowAddRecipe(false);\n      setShowAlert(false);\n    }\n  };\n\n  // Delete ingredient\n  const deleteIngredient = (id) => {\n    // console.log(\"delete\", id);\n    setIngrList(ingrList.filter((ingredient) => ingredient.ingId !== id));\n  };\n\n  // Add ingredient\n  const addIngredient = (qty, unit, ingName, ingPerServe) => {\n    const ingId = Math.floor(Math.random() * 1000) + 1;\n    // console.log(id);\n    const newIngredient = { ingId, qty, unit, ingName, ingPerServe };\n    setIngrList([...ingrList, newIngredient]);\n  };\n\n  return (\n    <Form className=\"mx-5 mb-5\" noValidate onSubmit={onAdd}>\n      {/* recipe name */}\n      <Row className=\"g-3 mb-3\">\n        <Col xl={6} className=\"mb-3\">\n          <Form.Floating>\n            <Form.Control\n              id=\"recipeName\"\n              type=\"text\"\n              //placeholder=\"lasagna\"\n              className=\"pb-1\"\n              required\n              value={recipeName}\n              onChange={(e) => setRecipeName(e.target.value)}\n            />\n            <label htmlFor=\"recipeName\" className=\"pt-2\">\n              Recipe Name *\n            </label>\n          </Form.Floating>\n          <div>\n            <Form.Label className=\"m-0 text-secondary validation-text ps-2\">\n              Required*\n            </Form.Label>\n          </div>\n          {recipeNameValid && (\n            <Form.Label className=\"m-0 text-danger validation-text ps-2\">\n              Please add the recipe name.\n            </Form.Label>\n          )}\n        </Col>\n\n        {/* method time */}\n        <Col md className=\"mb-3\">\n          <Form.Floating>\n            <Form.Control\n              id=\"prepTime\"\n              type=\"text\"\n              className=\"pb-1\"\n              value={prepTime}\n              onChange={(e) => setPrepTime(e.target.value)}\n            />\n            <label htmlFor=\"prepTime\" className=\"pt-2\">\n              <BsClockHistory className=\"pe-1 pb-1\" />\n              Preparation Time\n            </label>\n          </Form.Floating>\n        </Col>\n\n        {/* cooking time */}\n        <Col md className=\"mb-3\">\n          <Form.Floating>\n            <Form.Control\n              id=\"cookingTime\"\n              type=\"text\"\n              className=\"pb-1\"\n              value={cookingTime}\n              onChange={(e) => setCookingTime(e.target.value)}\n            />\n            <label htmlFor=\"cookingTime\" className=\"pt-2\">\n              <BsClock className=\"pe-1 pb-1\" />\n              Cooking Time\n            </label>\n          </Form.Floating>\n        </Col>\n\n        {/* serves people */}\n        <Col md className=\"mb-3\">\n          <Form.Floating>\n            <Form.Control\n              id=\"servingPpl\"\n              type=\"number\"\n              className=\"pb-1\"\n              required\n              value={servingPpl}\n              onChange={(e) => {\n                setServingPpl(e.target.value);\n                setServesOrigin(e.target.value);\n              }}\n            />\n            <label htmlFor=\"servingPpl\" className=\"pt-2\">\n              <FaUtensils className=\"pe-1 pb-1\" />\n              Serves *\n            </label>\n          </Form.Floating>\n          <div>\n            <Form.Label className=\"m-0 text-secondary validation-text ps-2\">\n              Required*\n            </Form.Label>\n          </div>\n          {servesValid && (\n            <Form.Label className=\"m-0 text-danger validation-text ps-2\">\n              Please add the serving number.\n            </Form.Label>\n          )}\n        </Col>\n      </Row>\n\n      {/* ingredients */}\n      {ingredientsValid && (\n        <div className=\"text-center\">\n          <Form.Label className=\"m-0 text-danger\">\n            Please add ingredients.\n          </Form.Label>\n        </div>\n      )}\n      <Ingredients\n        key={ingrList.ingId}\n        deleteIngredient={deleteIngredient}\n        addIngredient={addIngredient}\n        ingrList={ingrList}\n        servingPpl={servingPpl}\n      />\n\n      {/* method steps */}\n      <Row className=\"g-3 mb-3\">\n        <Col>\n          <Form.Floating className=\"mb-3\">\n            <Form.Control\n              id=\"method\"\n              as=\"textarea\"\n              className=\"pb-1 textarea\"\n              value={method}\n              onChange={(e) => setMethod(e.target.value)}\n            />\n            <label htmlFor=\"method\" className=\"pt-2\">\n              <GiCampCookingPot className=\"pe-1 pb-1\" />\n              Method\n            </label>\n          </Form.Floating>\n        </Col>\n      </Row>\n      <Alert variant=\"danger\" show={showAlert} >\n        Please check the required fields!\n      </Alert>\n      <div className=\"text-center\">\n        <Button variant=\"primary\" type=\"submit\" size=\"lg\">\n          Save Recipe\n        </Button>\n      </div>\n    </Form>\n  );\n}\n\nexport default AddRecipe;\n","import Button from \"react-bootstrap/Button\";\n\nfunction ShowAddForm({ onAdd, showAddRecipe }) {\n  return (\n    <div className=\"d-flex justify-content-center mb-5\">\n      <Button onClick={onAdd} variant={showAddRecipe ? \"danger\" : \"primary\"}>\n      {showAddRecipe ? \"Close Form\" : \"Add Recipe\"}\n      </Button>\n    </div>\n  );\n}\n\nexport default ShowAddForm;\n","import Accordion from \"react-bootstrap/Accordion\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n//import Button from \"react-bootstrap/Button\";\n\nimport { ImBin } from \"react-icons/im\";\nimport { IoMdAddCircleOutline } from \"react-icons/io\";\nimport { HiOutlineMinusCircle } from \"react-icons/hi\";\n\nfunction Recipes({ recipes, setRecipes, deleteRecipe }) {\n  \n  const increaseServes = (id) => {\n    const updatedRecipe = recipes.map((recipe) => {\n      if (recipe.id === id) {\n        return { ...recipe, serves: parseInt(recipe.serves) + 1 };\n      }\n      return recipe;\n    });\n    setRecipes(updatedRecipe);\n  };\n\n  const decreaseServes = (id) => {\n    const updatedRecipe = recipes.map((recipe) => {\n      if (recipe.id === id) {\n        return {\n          ...recipe,\n          serves: parseInt(recipe.serves) > 1 ? parseInt(recipe.serves) - 1 : 1,\n        };\n      }\n      return recipe;\n    });\n    setRecipes(updatedRecipe);\n  };\n\n  return (\n    <>\n      {recipes.length > 0 ? (\n        <Container className=\"mb-3\">\n          <Accordion className=\"mx-1 mb-5\">\n          {recipes.map((recipe) => (\n            // <Accordion className=\"mx-1 mb-5\" key={recipe.id}>\n              <Accordion.Item eventKey={recipe.id} key={recipe.id}>\n                <Accordion.Header>\n                  {recipe.recipeName.toUpperCase()}\n                </Accordion.Header>\n                <Accordion.Body className=\"px-3\">\n                  <div className=\"d-flex justify-content-between mb-3\">\n                    <Col className=\"text-center\">\n                      <Col>Prep</Col>\n                      <Col>{recipe.prepTime}</Col>\n                    </Col>\n                    <Col className=\"text-center\">\n                      <Col>Cooking</Col>\n                      <Col>{recipe.cookingTime}</Col>\n                    </Col>\n                    <Col className=\"text-center\">\n                      <Col>Serves</Col>\n                      <Col>{recipe.servesOrigin}</Col>\n                    </Col>\n                  </div>\n                  <Row className=\"mt-4 g-3\">\n                    <Col md={6} className=\"px-1 mb-3\">\n                      <h4>Ingredients</h4>\n                      <Container className=\"px-0 my-4 d-flex justify-content-between\">\n                        <h6>Number of servings</h6>\n                        <div>\n                          <HiOutlineMinusCircle\n                            className=\"btn-operators\"\n                            onClick={() => decreaseServes(recipe.id)}\n                          />\n                          <span className=\"mx-1\">{recipe.serves}</span>\n                          <IoMdAddCircleOutline\n                            className=\"btn-operators\"\n                            onClick={() => increaseServes(recipe.id)}\n                          />\n                        </div>\n                      </Container>\n                      {recipe.ingredients.map((ingr) => (\n                          <Row key={ingr.ingId}>\n                            <Col>\n                              <span>{ingr.ingPerServe * recipe.serves}</span>\n                              <span className=\"me-2\">{ingr.unit}</span>\n                              <span className=\"mx-2\">{ingr.ingName}</span>\n                            </Col>\n                          </Row>\n                        ))}\n                    </Col>\n                    <Col md={6} className=\"px-1 mb-3\">\n                      <h4>Method</h4>\n                      <Container className=\"px-0 mt-4\">\n                        {recipe.method}\n                      </Container>\n                    </Col>\n                  </Row>\n                  <div className=\"text-end mt-3\">\n                    <ImBin\n                      className=\"btn-delete px-2 py-1\"\n                      title=\"Delete recipe\"\n                      onClick={() => deleteRecipe(recipe.id)}\n                    />\n                  </div>\n                </Accordion.Body>\n              </Accordion.Item>\n            // </Accordion>\n          ))}\n          </Accordion>\n        </Container>\n      ) : (\n        <div className=\"text-center pt-5\">\n          <p className=\"mx-5\">No Recipes to Show.</p>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Recipes;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport AddRecipe from \"./components/AddRecipe\";\nimport ShowAddForm from \"./components/ShowAddForm\";\nimport Recipes from \"./components/Recipes\";\n\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [showAddRecipe, setShowAddRecipe] = useState(false);\n\n  const [recipes, setRecipes] = useState([\n    // {\n    //   id: 1,\n    //   recipeName: \"Lasagna\",\n    //   prepTime: \"20 mins\",\n    //   cookingTime: \"30 mins\",\n    //   serves: 4,\n    //   ingredients: [\n    //     {\n    //       ingId: 4,\n    //       qty: 200,\n    //       unit: \"ml\",\n    //       ingName: \"tomato\",\n    //     },\n    //     {\n    //       ingId: 6,\n    //       qty: 200,\n    //       unit: \"g\",\n    //       ingName: \"bechamel\",\n    //     },\n    //     {\n    //       ingId: 7,\n    //       qty: 300,\n    //       unit: \"g\",\n    //       ingName: \"cheese\",\n    //     },\n    //   ],\n    //   method:\n    //     \"Create a layer of the lasagna with tomato ragú, bechamel and cheese untul the top of the tray.\",\n    // },\n    // {\n    //   id: 2,\n    //   recipeName: \"Spaghetti\",\n    //   prepTime: \"20 mins\",\n    //   cookingTime: \"30 mins\",\n    //   serves: 4,\n    //   ingredients: [\n    //     {\n    //       ingId: 1,\n    //       qty: 200,\n    //       unit: \"ml\",\n    //       ingName: \"tomato\",\n    //     },\n    //     {\n    //       ingId: 2,\n    //       qty: 200,\n    //       unit: \"g\",\n    //       ingName: \"bechamel\",\n    //     },\n    //     {\n    //       ingId: 3,\n    //       qty: 300,\n    //       unit: \"g\",\n    //       ingName: \"cheese\",\n    //     },\n    //   ],\n    //   method:\n    //     \"Create a layer of the lasagna with tomato ragú, bechamel and cheese until the top of the tray.\",\n    // },\n    // {\n    //   id: 3,\n    //   recipeName: \"Gnocchi\",\n    //   prepTime: \"20 mins\",\n    //   cookingTime: \"30 mins\",\n    //   serves: 4,\n    //   ingredients: [\n    //     {\n    //       ingId: 7,\n    //       qty: 200,\n    //       unit: \"ml\",\n    //       ingName: \"tomato\",\n    //     },\n    //     {\n    //       ingId: 8,\n    //       qty: 200,\n    //       unit: \"g\",\n    //       ingName: \"bechamel\",\n    //     },\n    //     {\n    //       ingId: 9,\n    //       qty: 300,\n    //       unit: \"g\",\n    //       ingName: \"cheese\",\n    //     },\n    //   ],\n    //   method:\n    //     \"Create a layer of the lasagna with tomato ragú, bechamel and cheese untul the top of the tray.\",\n    // },\n  ]);\n\n  // Only run once the first time the component is rendered\n  useEffect(() => {\n    if(localStorage.getItem(\"recipesData\")) {\n        setRecipes(JSON.parse(localStorage.getItem(\"recipesData\")))\n    }\n  }, []);\n\n  // Run every time our recipe state changes\n  useEffect(() => {\n    localStorage.setItem(\"recipesData\", JSON.stringify(recipes));\n  }, [recipes]);\n\n  // Delete recipe\n  const deleteRecipe = (id) => {\n    setRecipes(recipes.filter((recipe) => recipe.id !== id));\n  };\n\n  // Add Recipe\n  const addRecipe = (recipe) => {\n    const id = Math.floor(Math.random() * 1000) + 1;\n    const newRecipe = { id, ...recipe };\n    setRecipes([...recipes, newRecipe]);\n  };\n\n  return (\n    <div>\n      <Header />\n      <ShowAddForm onAdd={() => setShowAddRecipe(!showAddRecipe)}  showAddRecipe={showAddRecipe}/>\n      {showAddRecipe && <AddRecipe key={recipes.id} addRecipe={addRecipe} setShowAddRecipe={setShowAddRecipe}/>}\n      <Recipes\n        recipes={recipes}\n        setRecipes={setRecipes}\n        deleteRecipe={deleteRecipe}\n        key={recipes.id}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}